#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi> // Requires auto-layer module.
#include <dt-bindings/zmk/keys.h>
#ifdef CONFIG_WIRELESS
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/outputs.h>
  #define _BT_SEL_KEYS_                                                        \
      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_CLR
#else
  #define _BT_SEL_KEYS_ &trans &trans &trans &trans &trans
#endif

#include "zmk-helpers/helper.h"
#include "zmk-helpers/unicode-chars/greek.dtsi"
#include "zmk-helpers/unicode-chars/german.dtsi"

#define XXX &none
#define ___ &trans

/* Global defaults */

#define QUICK_TAP_MS 175

&num_word {
  continue-list = <BSPC DEL DOT COMMA COLON PLUS MINUS SLASH ASTERISK KP_PLUS KP_MINUS KP_SLASH KP_ASTERISK LALT LSHFT LCTRL LGUI RGUI RCTRL RSHFT RALT>;
};

&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
  behaviors {
    snake_word: snake_word {
      compatible = "zmk,behavior-auto-layer";
      #binding-cells = <1>;
      continue-list = <Q W E R T Y U I O P A S D F G H J K L Z X C V B N M UNDER>;
      ignore-modifiers;
    };
  };
};

/* Layers */

/ {
    behaviors {
        tog_on: toggle_layer_on_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer On";
            toggle-mode = "on";
        };
        tog_off: toggle_layer_off_only {
            compatible = "zmk,behavior-toggle-layer";
            #binding-cells = <1>;
            display-name = "Toggle Layer Off";
            toggle-mode = "off";
        };
    };
};

#define DEF 0
#define NAV 1
#define FN 2
#define NUM 3
// #define SYS 4
#define MOUSE 4
#define QWERTY 5
#define ONESHOT 6
#define SNAKE 7
#define SHFTMIRROR 8
#define MIRROR 9


#define ALL_LAYERS \
  DEF NAV FN NUM MOUSE QWERTY ONESHOT SNAKE SHFTMIRROR MIRROR

#define NOT_NAV \
  DEF FN NUM MOUSE QWERTY ONESHOT SNAKE SHFTMIRROR MIRROR

// 1) your layer ↔︎ number ↔︎ Fn‑key table
#define LAYER_LIST \
  LL(DEF,        0,  F20)  \
  LL(NAV,        1,  F21)  \
  LL(FN,         2,  F22)  \
  LL(NUM,        3,  F23)  \
  LL(MOUSE,      4,  F24)  \
  LL(QWERTY,     5,  F15)  \
  LL(ONESHOT,    6,  F16)  \
  LL(SNAKE,      7,  F17)  \
  LL(SHFTMIRROR, 8,  F18)  \
  LL(MIRROR,     9,  F19) 

// fkey: temp toggle (eg. numword, capsword, etc.)
// shift fkey: tog on
// ctrl fkey: tog off
// ctrl shift fkey: tog on/off

// 2) helper macro to emit both on/off for a single entry
#define LL(name, layer, fn)                                          \
    ZMK_MACRO(temp_tog_signal_##name##,  bindings = <&kp fn>;       \
            wait-ms = <0>; tap-ms = <0>;)                             \
    ZMK_MACRO(tog_on_##name##,  bindings = <&kp LS(fn) &tog_on layer>;       \
            wait-ms = <0>; tap-ms = <0>;)                             \
    ZMK_MACRO(tog_off_##name##, bindings = <&kp LC(fn) &tog_off layer>;   \
            wait-ms = <0>; tap-ms = <0>;)                             \
    ZMK_MACRO(tog_##name##, bindings = <&kp LC(LS(fn)) &tog layer>;   \
            wait-ms = <0>; tap-ms = <0>;)

// 3) expand the whole list
LAYER_LIST

// 4) clean up
#undef LL

ZMK_MACRO(my_num_word, bindings = <&temp_tog_signal_NUM &num_word NUM>; \
           wait-ms = <0>; tap-ms = <0>;)

// ZMK_MACRO(tog_num_on, bindings = <&kp F_NUM &tog NUM>; wait-ms = <0>; tap-ms = <5>;)
// ZMK_MACRO(tog_num_off, bindings = <&kp LS(F_NUM) &tog NUM>; wait-ms = <0>; tap-ms = <5>;)

// 1) single source of truth
// #define LAYER_LIST \
//   LL(DEF,     0,  F20)  \
//   LL(NAV,     1,  F21)  \
//   LL(FN,      2,  F22)  \
//   LL(NUM,     3,  F23)  \
//   LL(MOUSE,   4,  F24)  \
//   LL(QWERTY,  5,  F15)  \
//   LL(ONESHOT, 6,  F16)
//
// // 2) generate an enum of layer IDs
// enum layer_id {
// #define LL(name, id, fn) name = id,
//   LAYER_LIST
// #undef LL
// };
//
// // 3) generate an enum of Fn‑key aliases
// enum layer_fn {
// #define LL(name, id, fn) F_##name = fn,
//   LAYER_LIST
// #undef LL
// };
//
// // 4) emit both on/off ZMK_MACROs
// #define LL(name, id, fn)                                                   \
//   ZMK_MACRO(tog_on_##name##,  bindings = <&kp F_##name  &tog name>;        \
//             wait-ms = <0>; tap-ms = <5>;)                                  \
//   ZMK_MACRO(tog_off_##name##, bindings = <&kp LS(F_##name) &tog name>;     \
//             wait-ms = <0>; tap-ms = <5>;)
//
// // 5) expand everything!
// LAYER_LIST
// #undef LL


/* Homerow mods */

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.

// #ifndef LH2
//   #define THUMBS LH1 LH0 RH0 RH1         // Thumbs on 34 keys.
// #else
//   #define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.
// #endif

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
  ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
               tapping-term-ms = <230>; quick-tap-ms = <QUICK_TAP_MS>;         \
               require-prior-idle-ms = <150>; hold-trigger-on-release;         \
               hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.

// Hack: Make HRM combos tap-only (cf, ZMK issue #544).
#define ZMK_COMBO_8(NAME, TAP, POS, LAYERS, COMBO_MS, IDLE_MS, HOLD, SIDE)     \
  MAKE_HRM(hm_combo_##NAME, &kp, TAP, SIDE THUMBS)                             \
  ZMK_COMBO_6(NAME, &hm_combo_##NAME HOLD 0, POS, LAYERS, COMBO_MS, IDLE_MS)

/* Combos, leader key sequences, mouse emulation */

#include "combos.dtsi" // Must be sourced after HRM-combo hack.
#include "leader.dtsi"
#include "mouse.dtsi"

/* Nav cluster */

// Trigger tap-action on all interrupts.
#define MT_CORE                                                                \
  flavor = "tap-preferred";                                                    \
  tapping-term-ms = <220>;                                                     \
  quick-tap-ms = <220>;                                                        \
  hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT  // Tap: left  | Long-tap: start of line.
#define NAV_RIGHT &mt_end 0    RIGHT // Tap: right | Long-tap: end   of line.
#define NAV_UP    &mt LC(HOME) UP    // Tap: up    | Long-tap: start of doc.
#define NAV_DOWN  &mt LC(END)  DOWN  // Tap: down  | Long-tap: end   of doc.
#define NAV_BSPC  &mt LC(BSPC) BSPC  // Tap: bspc  | Long-tap: delete word bwd.
#define NAV_DEL   &mt LC(DEL)  DEL   // Tap: del   | Long-tap: delete word fwd.

// Mask CTRL on left/right hold to avoid accidental jumps to start/end of doc.
#define MASK_MODS(NAME, MODS, BINDING)                                         \
  ZMK_MOD_MORPH(NAME, bindings = <BINDING>, <BINDING>; mods = <MODS>;)

MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Magic-shift & auto-layers */

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      // trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      trigger-keys = <>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)
&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
  /delete-property/ ignore-modifiers;
};

// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.
// #define SMART_NUM &smart_num NUM 0
// ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
//              tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
// ZMK_TAP_DANCE(num_dance, bindings = <&num_word NUM>, <&sl NUM>;
//               tapping-term-ms = <200>;)
// Tap: num-word | double-tap: sticky num-layer | Hold: num-layer.

// Tap: num-word | double-tap: toggle num-layer | Hold: num-layer.
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num, bindings = <&mo>, <&num_dance>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_TAP_DANCE(num_dance, bindings = <&my_num_word>, <&tog_on_NUM>;
              tapping-term-ms = <200>;)

// Smart-mouse, requires tri-state module.
ZMK_TRI_STATE(
    smart_mouse, bindings = <&tog_on_MOUSE>, <&none>, <&tog_off_MOUSE>;
    ignored-key-positions =
        <LT1 LT2 LH0 LH1 RT1 RT2 RT3 RM0 RM1 RM2 RM3 RM4 RB1 RB2 RB3 RH0 RH1>;
    ignored-layers = <MOUSE NAV FN>;)


/* Custom behaviors */

// Alt+Tab swapper, requires tri-state module.
ZMK_TRI_STATE(swapper, bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
              ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;)

// Define mod-morph with a *single* mod trigger for less repetition.
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2)                            \
  ZMK_MOD_MORPH(NAME, mods = <(MOD_L##MOD | MOD_R##MOD)>;                      \
                bindings = <BINDING1>, <BINDING2>;)

// Tap: comma | Shift + tap: semicolon | Ctrl + shift + tap: <.
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// Tap: dot | Shift + tap: colon | Ctrl + shift + tap: >.
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// Tap: qmark | Shift + tap: excl.
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// Tap: left/right parenthesis | Shft + tap: less-than/greater-than.
SIMPLE_MORPH(lpar_lt, SFT, &kp LPAR, &kp LT)
SIMPLE_MORPH(rpar_gt, SFT, &kp RPAR, &kp GT)
SIMPLE_MORPH(lpar_dllr,  SFT, &kp LPAR, &kp DLLR)
SIMPLE_MORPH(rpar_caret, SFT, &kp RPAR, &kp CARET)
SIMPLE_MORPH(lpar_caret,  SFT, &kp LPAR, &kp CARET)
SIMPLE_MORPH(rpar_dllr, SFT, &kp RPAR, &kp DLLR)

// TODO: figure out why i need this lol
SIMPLE_MORPH(ret, SFT, &kp RET, &kp LS(RET))

// ZMK_HOLD_TAP(lt_ret, bindings = <&mo>, <&kp RET>; flavor = "balanced";
//              tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)

// Tap: space | Shift + tap: dot -> space -> sticky shift | Hold: nav layer.
ZMK_HOLD_TAP(lt_spc, bindings = <&mo>, <&spc_morph>; flavor = "balanced";
             tapping-term-ms = <200>; quick-tap-ms = <QUICK_TAP_MS>;)
SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc, bindings = <&kp DOT &kp SPACE &sk LSHFT>; wait-ms = <0>;
          tap-ms = <5>;)

// Tap: backspace | Lshft + tap: delete | Rshft + tap: shift-delete.
ZMK_MOD_MORPH(bs_del, bindings = <&kp BSPC>, <&kp DEL>;
              mods = <(MOD_LSFT|MOD_RSFT)>; keep-mods = <MOD_RSFT>;)

// Tap: copy | double-tap: cut.
ZMK_TAP_DANCE(copy_cut, bindings = <&kp LC(INS)>, <&kp LC(X)>;
              tapping-term-ms = <200>;)

// Sticky shift + leader.
ZMK_MACRO(leader_sft, bindings = <&sk LSHFT &leader>;)

// Underscore/snake_case word
SIMPLE_MORPH(under_snakeword, SFT, &kp UNDER, &snake_word SNAKE)

// Misc aliases. [TODO: clean up]
#define CANCEL    &kp K_CANCEL            // Cancel caps-word & auto-layers.
#define DSK_PREV  &hmr LCTRL LG(LC(LEFT)) // Previous desktop.
#define DSK_NEXT  &hmr LALT LG(LC(RIGHT)) // Next     desktop.
#define PIN_WIN   &kp LG(LC(LS(Q)))       // Pin window across desktops.
#define PIN_APP   &kp LG(LC(LS(A)))       // Pin application across desktops.
#define DSK_MGR   &kp LA(GRAVE)           // Desktop manager.
#define VOL_DOWN  &hmr RSHFT C_VOL_DN

#define FN_RET FN RET // Tap: fn layer | Hold: return key.

/* Keymap */

// ZMK_CONDITIONAL_LAYER(sys, FN NUM, SYS) // FN + NUM --> SYS.

#ifndef ZMK_BASE_LAYER
  #define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                 \
      ZMK_LAYER(name, LT RT LM RM LB RB LH RH)
#endif

ZMK_BASE_LAYER(Base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    &kp TAB       &kp Q         &kp W         &kp E         &kp R         &kp T       ,   &kp Y         &kp U         &kp I         &kp O         &kp P         &kp BSPC    , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp ESC       &hml LALT A   &hml LSHFT S  &hml LCTRL D  &hml LGUI F  &kp G        ,   &kp H         &hmr RGUI J   &hmr RCTRL K &hmr RSHFT L  &hmr RALT SEMI &kp SQT     , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp DEL       &kp Z         &kp X         &kp C         &kp V         &kp B       ,   &kp COMMA     &kp N         &kp M         &kp DOT       &kp FSLH      &kp RET     , 
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
                                              SMART_NUM     &lt_spc FN 0  MAGIC_SHIFT ,   MAGIC_SHIFT  &lt_spc NAV 0  SMART_NUM           
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
// ___       &lt_spc NAV 0   &lt FN RET  ,   SMART_NUM     MAGIC_SHIFT   ___
                                                // ___           ___          ___    ,     ___           ___           ___ 
                                              // ___           &kp F15       &kp F16     ,   MAGIC_SHIFT   &kp F17       ___      
)

ZMK_BASE_LAYER(Nav,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___           &kp LA(F4)   &kp LC(RIGHT)  &kp UP        &swapper      ___         ,   &kp LC(C)     &kp LC(Z)     &kp HOME      NAV_BSPC      &kp LC(V)     NAV_DEL     , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___       &hml LALT END &hml LSHFT LEFT &hml LCTRL DOWN &hml LGUI RIGHT   ___     ,   NAV_LEFT      NAV_DOWN      NAV_UP        NAV_RIGHT     &kp RET       ___         , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp DEL       ___           ___           ___           ___           &kp LC(LEFT),   &kp INS       &kp TAB       ___           ___           ___           &tog_FN     , 
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
                                              &tog_on_MOUSE ___           ___         ,   ___           ___        CANCEL        
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_BASE_LAYER(Fn,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    &tog_QWERTY   &bt BT_CLR    &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0,   &kp K_APP   &kp KP_ASTERISK &kp KP_MINUS  &kp KP_PLUS   VOL_DOWN      ___         , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp F1        &hml LALT F2 &hml LSHFT F3 &hml LCTRL F4 &hml LGUI F5   &kp F6      ,   &kp F7      &hmr RGUI F8  &hmr RCTRL F9 &hmr RSHFT F10 &hmr RALT F11  &kp F12     , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &tog_NAV      &kp C_PREV    &kp C_PP      &kp C_NEXT   &kp C_VOL_DN  &kp C_VOL_UP ,   &tog_SNAKE   &kp C_BRI_DEC &kp C_BRI_INC  ___          &bt BT_DISC 1  ___         ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────╯ 
                                                 ___           ___           ___      ,     ___         ___           ___ 
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯ 
)
                                              // ___           ___           ___         ,   &kp C_MUTE    &kp C_PP      ___        
// TODO: esc toggles DEF escape being a mirror &mo
ZMK_BASE_LAYER(Num,
//╭─────────────┬────────────────────┬────────────────────────┬────────────────────┬──────────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬────────────┬─────────────┬─────────────╮ 
    &sl ONESHOT   &kp N1               &kp N2                   &kp N3               &kp N4             &kp N5      ,   &kp N6        &kp N7        &kp N8        &kp N9       &kp N0        ___         ,
//├─────────────┼────────────────────┼────────────────────────┼────────────────────┼──────────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼────────────┼─────────────┼─────────────┤ 
  &tog_SHFTMIRROR &hml LALT KP_SLASH   &hml LSHFT KP_ASTERISK   &hml LCTRL KP_MINUS  &hml LGUI KP_PLUS  ___         ,   &kp COLON    &hmr RGUI N4  &hmr RCTRL N5 &hmr RSHFT N6 &hmr RALT N0  ___         ,
//├─────────────┼────────────────────┼────────────────────────┼────────────────────┼──────────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼────────────┼─────────────┼─────────────┤ 
    &kp DEL       ___                  &kp PERIOD               &kp COMMA            &kp PERIOD         ___         ,   ___           &kp N1        &kp N2        &kp N3       ___           ___         ,
//╰─────────────┼────────────────────┼────────────────────────┴────────────────────┼──────────────────┼─────────────┤ ├─────────────┼─────────────┴──────────────────────────┼─────────────┼─────────────╯ 
                                                                &tog_off_NUM         ___                ___         ,   ___           ___           &tog_off_NUM        
//                                                            ╰────────────────────┴──────────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯ 
)

// ZMK_BASE_LAYER(Num,
// //╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
//     // ___           ___           &kp N7        &kp N8        &kp N9        ___         ,   ___           ___           ___           ___           ___           ___         , 
//     // ___           &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PERC    ,   &kp CIRC      &kp AMPS      &kp ASTRK     &kp LPRN      &kp RPRN      ___         ,
//     ___           &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PERCENT    ,   &kp CARET      &kp AMPS      &kp ASTRK     &kp LPAR      &kp RPAR      ___         ,
//         // ___            ___           ___           ___           ___           ___      ,     ___           ___           ___           ___           ___           ___          ,
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//     ___           &hml LALT N1 &hml LSHFT N2 &hml LCTRL N3  &hml LGUI N4  &kp N5      ,   &kp N6        &hmr RGUI N7 &hmr RCTRL N8 &hmr RSHFT N9  &hmr RALT N0  ___         ,
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//     ___           ___           &kp N1        &kp N2        &kp N3        ___         ,   ___           ___           ___           ___           ___           ___         , 
// //╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
//                                               ___           ___           ___         ,   ___           ___            ___        
// //                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯ 
// )


// ZMK_BASE_LAYER(Sys,
// //╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
//     ___                                      _BT_SEL_KEYS_                            ,   ___           ___           ___           ___           ___           ___         ,
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//     ___           ___           ___           ___           ___           &bootloader ,   &bootloader   ___           ___           ___           ___           ___         ,
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
//    &bt BT_CLR_ALL ___           ___           ___           ___           &sys_reset  ,   &sys_reset    ___           ___           ___           ___           ___         ,
// //╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯
//                                                  ___           ___           ___      ,     ___           ___           ___ 
//                                               // ___           ___           ___         ,   ___           &tog SYS      ___        
// //                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯ 
// )

ZMK_BASE_LAYER(Mouse,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    ___           ___           ___           ___           ___           ___         ,   ___           &kp PG_UP     U_MS_U         &kp PG_DN    ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___           ___         ,   U_WH_L        U_MS_L        U_MS_D         U_MS_R       U_WH_R        ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
    ___           ___           ___           ___           ___           ___         ,   ___           &mkp LCLK     &mkp MCLK      &mkp RCLK    ___           ___         ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴─────────────────────────────────────────╯
                                             &tog_off_MOUSE    ___           ___         ,   U_WH_U        ___           U_WH_D
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯ 
)

ZMK_BASE_LAYER(Qwerty,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___            &kp A         &kp S         &kp D         &kp F         ___        ,   ___           &kp J         &kp K         &kp L         &kp SEMI      ___         , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
                                               ___           ___           ___        ,   ___           ___           ___ 
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_BASE_LAYER(Oneshot,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___            &sk LALT      &sk LSHFT     &sk LCTRL     &sk LGUI      ___        ,   ___           &sk RGUI      &sk RCTRL     &sk RSHFT     &sk RALT      ___         , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
                                               ___           ___           ___        ,   ___           ___           ___ 
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)

ZMK_BASE_LAYER(Snake,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
                                               ___         &lt FN UNDER     ___        ,   ___          ___           ___ 
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(ShftMirror,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    ___           ___           ___           ___           ___           ___         ,   ___           ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           ___           ___           ___         ,   ___           ___           ___           ___           ___           ___         ,
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    ___           ___           ___           ___           ___           ___         ,   ___           ___           ___           ___           ___           ___         ,
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────╯ 
                                              ___           ___           &sl MIRROR  ,   ___           ___           ___ 
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)


ZMK_BASE_LAYER(Mirror,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
    &kp BSPC     &kp P         &kp O         &kp I         &kp U         &kp Y       ,   &kp T         &kp R         &kp E         &kp W         &kp Q         &kp TAB     , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp SQT      &hmr RALT SEMI &hmr RSHFT L  &hmr RCTRL K  &hmr RGUI J   &kp H       ,   &kp G         &hml LGUI F   &hml LCTRL D  &hml LSHFT S  &hml LALT A   &kp ESC     , 
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
    &kp RET      &kp FSLH      &kp DOT       &kp M         &kp N         &kp COMMA   ,   &kp B         &kp V         &kp C         &kp X         &kp Z         &kp DEL     , 
//╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
                                              SMART_NUM     &lt_spc NAV 0  MAGIC_SHIFT ,   MAGIC_SHIFT  &lt_spc FN 0  SMART_NUM           
//                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
)



// ZMK_BASE_LAYER(Combos,
// //╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
//     ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//     ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//     ___            ___           ___           ___           ___           ___        ,   ___           ___           ___           ___           ___           ___         ,
// //╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
//                                                ___           ___           ___        ,   ___           ___           ___ 
// //                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
// )



// ZMK_BASE_LAYER(Combos, 
// ___            ___           ___           ___           ___           ___      ,     ___           ___           ___           ___           ___           ___          ,
// ___            ___           ___           ___           ___           ___      ,     ___           ___           ___           ___           ___           ___          ,
// ___            ___           ___           ___           ___           ___      ,     ___           ___           ___           ___           ___           ___          ,
//                                            ___           ___           ___      ,     ___           ___           ___ 
// )


// ZMK_BASE_LAYER(Qwerty,
// //╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ 
//     &kp TAB       &kp Q         &kp W         &kp E         &kp R         &kp T       ,   &kp Y         &kp U         &kp I         &kp O         &kp P         &kp BSPC    , 
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//     &kp ESC       &kp A         &kp S         &kp D         &kp F         &kp G       ,   &kp H         &kp J         &kp K         &kp L         &kp SEMI      &kp SQT     , 
// //├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ 
//     &kp LSHFT     &kp Z         &kp X         &kp C         &kp V         &kp B       ,   &kp COMMA     &kp N         &kp M         &kp DOT       &kp FSLH      &kp RET     , 
// //╰─────────────┼─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────┼─────────────╯ 
//                                               SMART_NUM     &lt_spc FN 0  MAGIC_SHIFT ,   MAGIC_SHIFT  &lt_spc NAV 0  SMART_NUM           
// //                                          ╰─────────────┴─────────────┴─────────────╯ ╰─────────────┴─────────────┴─────────────╯
// )

/* vim: set ft=c tw=146: */
